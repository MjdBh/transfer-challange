/*
 * This file is generated by jOOQ.
 */
package com.revolut.challenge.jooq.tables.records;


import com.revolut.challenge.jooq.tables.AccountTransaction;
import com.revolut.challenge.model.enumeration.TransactionType;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountTransactionRecord extends UpdatableRecordImpl<AccountTransactionRecord> implements Record8<Long, TransactionType, LocalDateTime, Long, BigDecimal, BigDecimal, Long, String> {

    private static final long serialVersionUID = -2012202438;

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.ID</code>.
     */
    public AccountTransactionRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSACTION_TYPE</code>.
     */
    public AccountTransactionRecord setTransactionType(TransactionType value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSACTION_TYPE</code>.
     */
    public TransactionType getTransactionType() {
        return (TransactionType) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.CREATE_DATETIME</code>.
     */
    public AccountTransactionRecord setCreateDatetime(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.CREATE_DATETIME</code>.
     */
    public LocalDateTime getCreateDatetime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.FINANCIAL_ACCOUNT</code>.
     */
    public AccountTransactionRecord setFinancialAccount(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.FINANCIAL_ACCOUNT</code>.
     */
    public Long getFinancialAccount() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.AMOUNT</code>.
     */
    public AccountTransactionRecord setAmount(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.AMOUNT</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.BALANCE</code>.
     */
    public AccountTransactionRecord setBalance(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.BALANCE</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSFER</code>.
     */
    public AccountTransactionRecord setTransfer(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSFER</code>.
     */
    public Long getTransfer() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSACTION_ID</code>.
     */
    public AccountTransactionRecord setTransactionId(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSACTION_ID</code>.
     */
    public String getTransactionId() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, TransactionType, LocalDateTime, Long, BigDecimal, BigDecimal, Long, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, TransactionType, LocalDateTime, Long, BigDecimal, BigDecimal, Long, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AccountTransaction.ACCOUNT_TRANSACTION.ID;
    }

    @Override
    public Field<TransactionType> field2() {
        return AccountTransaction.ACCOUNT_TRANSACTION.TRANSACTION_TYPE;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return AccountTransaction.ACCOUNT_TRANSACTION.CREATE_DATETIME;
    }

    @Override
    public Field<Long> field4() {
        return AccountTransaction.ACCOUNT_TRANSACTION.FINANCIAL_ACCOUNT;
    }

    @Override
    public Field<BigDecimal> field5() {
        return AccountTransaction.ACCOUNT_TRANSACTION.AMOUNT;
    }

    @Override
    public Field<BigDecimal> field6() {
        return AccountTransaction.ACCOUNT_TRANSACTION.BALANCE;
    }

    @Override
    public Field<Long> field7() {
        return AccountTransaction.ACCOUNT_TRANSACTION.TRANSFER;
    }

    @Override
    public Field<String> field8() {
        return AccountTransaction.ACCOUNT_TRANSACTION.TRANSACTION_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public TransactionType component2() {
        return getTransactionType();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateDatetime();
    }

    @Override
    public Long component4() {
        return getFinancialAccount();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public BigDecimal component6() {
        return getBalance();
    }

    @Override
    public Long component7() {
        return getTransfer();
    }

    @Override
    public String component8() {
        return getTransactionId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public TransactionType value2() {
        return getTransactionType();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateDatetime();
    }

    @Override
    public Long value4() {
        return getFinancialAccount();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public BigDecimal value6() {
        return getBalance();
    }

    @Override
    public Long value7() {
        return getTransfer();
    }

    @Override
    public String value8() {
        return getTransactionId();
    }

    @Override
    public AccountTransactionRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value2(TransactionType value) {
        setTransactionType(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value3(LocalDateTime value) {
        setCreateDatetime(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value4(Long value) {
        setFinancialAccount(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value6(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value7(Long value) {
        setTransfer(value);
        return this;
    }

    @Override
    public AccountTransactionRecord value8(String value) {
        setTransactionId(value);
        return this;
    }

    @Override
    public AccountTransactionRecord values(Long value1, TransactionType value2, LocalDateTime value3, Long value4, BigDecimal value5, BigDecimal value6, Long value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountTransactionRecord
     */
    public AccountTransactionRecord() {
        super(AccountTransaction.ACCOUNT_TRANSACTION);
    }

    /**
     * Create a detached, initialised AccountTransactionRecord
     */
    public AccountTransactionRecord(Long id, TransactionType transactionType, LocalDateTime createDatetime, Long financialAccount, BigDecimal amount, BigDecimal balance, Long transfer, String transactionId) {
        super(AccountTransaction.ACCOUNT_TRANSACTION);

        set(0, id);
        set(1, transactionType);
        set(2, createDatetime);
        set(3, financialAccount);
        set(4, amount);
        set(5, balance);
        set(6, transfer);
        set(7, transactionId);
    }
}
