/*
 * This file is generated by jOOQ.
 */
package com.revolut.challenge.jooq.tables;


import com.revolut.challenge.jooq.Indexes;
import com.revolut.challenge.jooq.Keys;
import com.revolut.challenge.jooq.Public;
import com.revolut.challenge.jooq.tables.records.TransferRecord;
import com.revolut.challenge.model.enumeration.TransferStatusType;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = -699666990;

    /**
     * The reference instance of <code>PUBLIC.TRANSFER</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>PUBLIC.TRANSFER.ID</code>.
     */
    public final TableField<TransferRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.TRANSFER_STATUS_TYPE</code>.
     */
    public final TableField<TransferRecord, TransferStatusType> TRANSFER_STATUS_TYPE = createField(DSL.name("TRANSFER_STATUS_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "", new org.jooq.impl.EnumConverter<java.lang.String, com.revolut.challenge.model.enumeration.TransferStatusType>(java.lang.String.class, com.revolut.challenge.model.enumeration.TransferStatusType.class));

    /**
     * The column <code>PUBLIC.TRANSFER.FROM_ACCOUNT</code>.
     */
    public final TableField<TransferRecord, Long> FROM_ACCOUNT = createField(DSL.name("FROM_ACCOUNT"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.TO_ACCOUNT</code>.
     */
    public final TableField<TransferRecord, Long> TO_ACCOUNT = createField(DSL.name("TO_ACCOUNT"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.CREATE_DATETIME</code>.
     */
    public final TableField<TransferRecord, LocalDateTime> CREATE_DATETIME = createField(DSL.name("CREATE_DATETIME"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer() {
        this(DSL.name("TRANSFER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7);
    }

    @Override
    public Identity<TransferRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSFER;
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.PK_TRANSFER;
    }

    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.PK_TRANSFER);
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, TransferStatusType, Long, Long, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
