/*
 * This file is generated by jOOQ.
 */
package com.revolut.challenge.jooq.tables;


import com.revolut.challenge.jooq.Indexes;
import com.revolut.challenge.jooq.Keys;
import com.revolut.challenge.jooq.Public;
import com.revolut.challenge.jooq.tables.records.AccountTransactionRecord;
import com.revolut.challenge.model.enumeration.TransactionType;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountTransaction extends TableImpl<AccountTransactionRecord> {

    private static final long serialVersionUID = 125966432;

    /**
     * The reference instance of <code>PUBLIC.ACCOUNT_TRANSACTION</code>
     */
    public static final AccountTransaction ACCOUNT_TRANSACTION = new AccountTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountTransactionRecord> getRecordType() {
        return AccountTransactionRecord.class;
    }

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.ID</code>.
     */
    public final TableField<AccountTransactionRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSACTION_TYPE</code>.
     */
    public final TableField<AccountTransactionRecord, TransactionType> TRANSACTION_TYPE = createField(DSL.name("TRANSACTION_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "", new org.jooq.impl.EnumConverter<java.lang.String, com.revolut.challenge.model.enumeration.TransactionType>(java.lang.String.class, com.revolut.challenge.model.enumeration.TransactionType.class));

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.CREATE_DATETIME</code>.
     */
    public final TableField<AccountTransactionRecord, LocalDateTime> CREATE_DATETIME = createField(DSL.name("CREATE_DATETIME"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.FINANCIAL_ACCOUNT</code>.
     */
    public final TableField<AccountTransactionRecord, Long> FINANCIAL_ACCOUNT = createField(DSL.name("FINANCIAL_ACCOUNT"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.AMOUNT</code>.
     */
    public final TableField<AccountTransactionRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.BALANCE</code>.
     */
    public final TableField<AccountTransactionRecord, BigDecimal> BALANCE = createField(DSL.name("BALANCE"), org.jooq.impl.SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSFER</code>.
     */
    public final TableField<AccountTransactionRecord, Long> TRANSFER = createField(DSL.name("TRANSFER"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_TRANSACTION.TRANSACTION_ID</code>.
     */
    public final TableField<AccountTransactionRecord, String> TRANSACTION_ID = createField(DSL.name("TRANSACTION_ID"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>PUBLIC.ACCOUNT_TRANSACTION</code> table reference
     */
    public AccountTransaction() {
        this(DSL.name("ACCOUNT_TRANSACTION"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_TRANSACTION</code> table reference
     */
    public AccountTransaction(String alias) {
        this(DSL.name(alias), ACCOUNT_TRANSACTION);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_TRANSACTION</code> table reference
     */
    public AccountTransaction(Name alias) {
        this(alias, ACCOUNT_TRANSACTION);
    }

    private AccountTransaction(Name alias, Table<AccountTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountTransaction(Name alias, Table<AccountTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountTransaction(Table<O> child, ForeignKey<O, AccountTransactionRecord> key) {
        super(child, key, ACCOUNT_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    @Override
    public Identity<AccountTransactionRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_TRANSACTION;
    }

    @Override
    public UniqueKey<AccountTransactionRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT_TRANSACTION;
    }

    @Override
    public List<UniqueKey<AccountTransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountTransactionRecord>>asList(Keys.PK_ACCOUNT_TRANSACTION);
    }

    @Override
    public AccountTransaction as(String alias) {
        return new AccountTransaction(DSL.name(alias), this);
    }

    @Override
    public AccountTransaction as(Name alias) {
        return new AccountTransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTransaction rename(String name) {
        return new AccountTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTransaction rename(Name name) {
        return new AccountTransaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, TransactionType, LocalDateTime, Long, BigDecimal, BigDecimal, Long, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
