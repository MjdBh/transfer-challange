/*
 * This file is generated by jOOQ.
 */
package com.revolut.challenge.jooq.tables;


import com.revolut.challenge.jooq.Indexes;
import com.revolut.challenge.jooq.Keys;
import com.revolut.challenge.jooq.Public;
import com.revolut.challenge.jooq.tables.records.FinancialAccountRecord;
import com.revolut.challenge.model.enumeration.AccountStatusType;
import com.revolut.challenge.model.enumeration.Currency;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialAccount extends TableImpl<FinancialAccountRecord> {

    private static final long serialVersionUID = 135538755;

    /**
     * The reference instance of <code>PUBLIC.FINANCIAL_ACCOUNT</code>
     */
    public static final FinancialAccount FINANCIAL_ACCOUNT = new FinancialAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FinancialAccountRecord> getRecordType() {
        return FinancialAccountRecord.class;
    }

    /**
     * The column <code>PUBLIC.FINANCIAL_ACCOUNT.ID</code>.
     */
    public final TableField<FinancialAccountRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_ACCOUNT.ACCOUNT_STATUS_TYPE</code>.
     */
    public final TableField<FinancialAccountRecord, AccountStatusType> ACCOUNT_STATUS_TYPE = createField(DSL.name("ACCOUNT_STATUS_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "", new org.jooq.impl.EnumConverter<java.lang.String, com.revolut.challenge.model.enumeration.AccountStatusType>(java.lang.String.class, com.revolut.challenge.model.enumeration.AccountStatusType.class));

    /**
     * The column <code>PUBLIC.FINANCIAL_ACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public final TableField<FinancialAccountRecord, String> ACCOUNT_NUMBER = createField(DSL.name("ACCOUNT_NUMBER"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_ACCOUNT.CREATE_DATETIME</code>.
     */
    public final TableField<FinancialAccountRecord, LocalDateTime> CREATE_DATETIME = createField(DSL.name("CREATE_DATETIME"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_ACCOUNT.BALANCE</code>.
     */
    public final TableField<FinancialAccountRecord, BigDecimal> BALANCE = createField(DSL.name("BALANCE"), org.jooq.impl.SQLDataType.DECIMAL(20, 2), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_ACCOUNT.CURRENCY</code>.
     */
    public final TableField<FinancialAccountRecord, Currency> CURRENCY = createField(DSL.name("CURRENCY"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "", new org.jooq.impl.EnumConverter<java.lang.String, com.revolut.challenge.model.enumeration.Currency>(java.lang.String.class, com.revolut.challenge.model.enumeration.Currency.class));

    /**
     * Create a <code>PUBLIC.FINANCIAL_ACCOUNT</code> table reference
     */
    public FinancialAccount() {
        this(DSL.name("FINANCIAL_ACCOUNT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.FINANCIAL_ACCOUNT</code> table reference
     */
    public FinancialAccount(String alias) {
        this(DSL.name(alias), FINANCIAL_ACCOUNT);
    }

    /**
     * Create an aliased <code>PUBLIC.FINANCIAL_ACCOUNT</code> table reference
     */
    public FinancialAccount(Name alias) {
        this(alias, FINANCIAL_ACCOUNT);
    }

    private FinancialAccount(Name alias, Table<FinancialAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private FinancialAccount(Name alias, Table<FinancialAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FinancialAccount(Table<O> child, ForeignKey<O, FinancialAccountRecord> key) {
        super(child, key, FINANCIAL_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_ACCOUNT_NUMBER, Indexes.PRIMARY_KEY_B);
    }

    @Override
    public Identity<FinancialAccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_FINANCIAL_ACCOUNT;
    }

    @Override
    public UniqueKey<FinancialAccountRecord> getPrimaryKey() {
        return Keys.PK_FINANCIAL_ACCOUNT;
    }

    @Override
    public List<UniqueKey<FinancialAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<FinancialAccountRecord>>asList(Keys.PK_FINANCIAL_ACCOUNT);
    }

    @Override
    public FinancialAccount as(String alias) {
        return new FinancialAccount(DSL.name(alias), this);
    }

    @Override
    public FinancialAccount as(Name alias) {
        return new FinancialAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialAccount rename(String name) {
        return new FinancialAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialAccount rename(Name name) {
        return new FinancialAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, AccountStatusType, String, LocalDateTime, BigDecimal, Currency> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
